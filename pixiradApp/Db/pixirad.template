# Database for the records specific to the Pixirad driver
# Mark Rivers
# Jan. 9, 2014

# We redefine the states for the TriggerMode records defined in ADBase.template
record(mbbo,"$(P)$(R)TriggerMode") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"External")
    field(TWVL,"2")
    field(TWST,"Bulb")
}

record(mbbi,"$(P)$(R)TriggerMode_RBV") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"External")
    field(TWVL,"2")
    field(TWST,"Bulb")
}

# We redefine the states for the FileFormat records defined in NDFile.template
record(mbbo, "$(P)$(R)FileFormat")
{
    field(ZRST, "Raw")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(P)$(R)FileFormat_RBV")
{
    field(ZRST, "Raw")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbo,"$(P)$(R)CollectionMode") {
    field(DESC, "Collection mode")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COLLECTION_MODE")
    field(ZRVL, "0")
    field(ZRST, "1 color low")
    field(ONVL, "1")
    field(ONST, "1 color high")
    field(TWVL, "2")
    field(TWST, "2 color")
    field(THVL, "3")
    field(THST, "4 color")
    field(FRVL, "4")
    field(FRST, "1 color DTF")
    field(FVVL, "5")
    field(FVST, "2 color DTF")
}

record(mbbi,"$(P)$(R)CollectionMode_RBV") {
    field(DESC, "Collection mode")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COLLECTION_MODE")
    field(ZRVL, "0")
    field(ZRST, "1 color low")
    field(ONVL, "1")
    field(ONST, "1 color high")
    field(TWVL, "2")
    field(TWST, "2 color")
    field(THVL, "3")
    field(THST, "4 color")
    field(FRVL, "4")
    field(FRST, "1 color DTF")
    field(FVVL, "5")
    field(FVST, "2 color DTF")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)SaveData") {
    field(DESC, "Save data")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SAVE_DATA")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi,"$(P)$(R)SaveData_RBV") {
    field(DESC, "Save data")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SAVE_DATA")
    field(ZNAM, "No")
    field(0NAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Threshold energies
record(ao, "$(P)$(R)Threshold1")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

record(ai, "$(P)$(R)Threshold1_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Threshold2")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD2")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

record(ai, "$(P)$(R)Threshold2_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD2")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Threshold3")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD3")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

record(ai, "$(P)$(R)Threshold3_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD3")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Threshold4")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD4")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(VAL, "10.000")
}

record(ai, "$(P)$(R)Threshold4_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD4")
    field(DESC, "Energy threshold")
    field(EGU,  "keV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)HVValue")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_VALUE")
    field(DESC, "High voltage value")
    field(EGU,  "V")
    field(DRVL, "0")
    field(LOPR, "0")
    field(DRVH, "400")
    field(HOPR, "400")
    field(PREC, "1")
}

record(ai, "$(P)$(R)HVValue_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_VALUE")
    field(DESC, "Energy threshold")
    field(EGU,  "V")
    field(LOPR, "0")
    field(HOPR, "400")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)HVState") {
    field(DESC, "High voltage state")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi,"$(P)$(R)HVState_RBV") {
    field(DESC, "High voltage state")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_STATE")
    field(ZNAM, "Off")
    field(0NAM, "On")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)HVMode") {
    field(DESC, "High voltage mode")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_MODE")
    field(ZNAM, "Manual")
    field(ONAM, "Auto")
}

record(bi,"$(P)$(R)HVMode_RBV") {
    field(DESC, "High voltage mode")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HV_MODE")
    field(ZNAM, "Manual")
    field(ONAM, "Auto")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)SyncInPolarity") {
    field(DESC, "Sync in polarity")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SYNC_IN_POLARITY")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
}

record(bi,"$(P)$(R)SyncInPolarity_RBV") {
    field(DESC, "Sync in polarity")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SYNC_IN_POLARITY")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)SyncOutPolarity") {
    field(DESC, "Sync out polarity")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SYNC_OUT_POLARITY")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
}

record(bi,"$(P)$(R)SyncOutPolarity_RBV") {
    field(DESC, "Sync out polarity")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SYNC_OUT_POLARITY")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)DownloadSpeed") {
    field(DESC, "Download speed")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DOWNLOAD_SPEED")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
}

record(bi,"$(P)$(R)DownloadSpeed_RBV") {
    field(DESC, "Download speed")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DOWNLOAD_SPEED")
    field(ZNAM, "Positive")
    field(ONAM, "Negative")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)CoolingValue")
{
    field(DESC, "Cooling value")
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COOLING_VALUE")
    field(EGU,  "V")
    field(DRVL, "-40")
    field(LOPR, "-40")
    field(DRVH, "30")
    field(HOPR, "30")
    field(PREC, "1")
}

record(ai, "$(P)$(R)CoolingValue_RBV")
{
    field(DESC, "Cooling value")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COOLING_VALUE")
    field(EGU,  "V")
    field(LOPR, "-40")
    field(HOPR, "30")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)CoolingState") {
    field(DESC, "Cooling state")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COOLING_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi,"$(P)$(R)CoolingState_RBV") {
    field(DESC, "Cooling state")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COOLING_STATE")
    field(ZNAM, "Off")
    field(0NAM, "On")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)HotTemperature_RBV")
{
    field(DESC, "Hot temperature")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HOT_TEMPERATURE")
    field(EGU,  "C")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BoxTemperature_RBV")
{
    field(DESC, "Box temperature")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BOX_TEMPERATURE")
    field(EGU,  "C")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BoxHumidity_RBV")
{
    field(DESC, "Box humidity")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BOX_HUMIDITY")
    field(EGU,  "%")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)PeltierPower_RBV")
{
    field(DESC, "Peltier power")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PELTIER_POWER")
    field(EGU,  "%")
    field(PREC, "1")
    field(SCAN, "I/O Intr")
}

# Timeout waiting for image to be written to file system
record(ao, "$(P)$(R)ImageFileTmot")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))IMAGE_FILE_TMOT")
    field(DESC, "Timeout for image file")
    field(VAL,  "20")
    field(EGU,  "s")
    field(PREC, "3")
}

# asyn record for interactive communication with server
record(asyn, "$(P)$(R)serverAsyn")
{
    field(PORT,  "$(SERVER_PORT)")
    field(IMAX, "64")
    field(OMAX, "64")
    field(AUCT, "0")
}

# Set DISA for PVs in ADBase that do not apply to Pixirad

record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}

